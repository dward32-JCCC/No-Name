@model DeveloperListViewModel
@{
    ViewData["Title"] = " | Developer Catalog";

    
    RouteDictionary current = Model.CurrentRoute;
    RouteDictionary routes = Model.CurrentRoute.Clone();
}

<h1>Developer Catalog</h1>

<table class="table table-bordered table-striped table-sm">

    <thead class="thead-dark">
        <tr>
            <th>
                @{ routes.SetSortAndDirection(nameof(Developer.DevName), current); }
                <a asp-action="List" asp-all-route-data="@routes"
                   class="text-white">Developer</a>
            </th>
            <th>Game(s)</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Developer developer in Model.Developers)
        {
        <tr>
            <td>
                <a asp-action="Details" asp-route-id="@developer.DeveloperId"
                   asp-route-slug="@developer.FullName.Slug()">
                    @developer.DevName
                </a>
            </td>
          
            <td>
                @foreach (var ba in developer.GameDevelopers)
                {
                    <p>
                        <a asp-action="Details" asp-controller="Game"
                           asp-route-id="@ba.GameId"
                           asp-route-slug="@ba.Game.Title.Slug()">
                            @ba.Game.Title
                        </a>
                    </p>
                }
            </td>
        </tr>
        }
    </tbody>
</table>

@* paging links *@
@{
    @* Reset the route dictionary to the current route values. *@
    routes = Model.CurrentRoute.Clone();

    @* update route dictionary with page number in 'i' and then use
        updated route dictionary to create route segments for paging link. *@
    for (int i = 1; i <= Model.TotalPages; i++)
    {
        routes.PageNumber = i;
        <a asp-action="List" asp-all-route-data="@routes"
           class="btn btn-outline-primary @Nav.Active(i, current.PageNumber)">@i</a>
    }
}
